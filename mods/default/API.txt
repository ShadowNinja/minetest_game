"default" API
=============

Sounds
------

Sounds inside the default table can be used within the sounds field of node definitions.

  * `default.node_sound_defaults()`
  * `default.node_sound_stone_defaults()`
  * `default.node_sound_dirt_defaults()`
  * `default.node_sound_sand_defaults()`
  * `default.node_sound_wood_defaults()`
  * `default.node_sound_leaves_defaults()`
  * `default.node_sound_glass_defaults()`


Constants
---------

  * `default.LIGHT_MAX`: The maximum non-sun node light level (14).


Player API
----------

The player API can register player models and update the player's appearence.

  * `default.player_register_model(name, def)`: Register a new model to be
    used by players.
    * `name`: Model filename such as "character.x", "foo.b3d", etc.
    * `def`: A [player model definition](#player-model-definition).

  * `default.registered_player_models[name]`: Table of registered
    [player model definitions](#player-model-definition).

  * `default.player_set_model(player, model_name)`: Changes a player's model.
    * `player`: PlayerRef.
    * `model_name`: Model registered with `player_register_model()`.

  * `default.player_set_animation(player, anim_name, [speed])`: Applies an
    animation to a player.
    * `anim_name`: Name of the animation.
    * `speed`: Frames per second.  If nil, default from the model is used.

  * `default.player_set_textures(player, [textures])`: Sets player textures.
    * `player`: PlayerRef.
    * `textures`: Array of textures. If nil, the default textures from the
      model def are used

  * `default.player_get_animation(player)`: Returns a table containing
    `"model"`, `"textures"` and `"animation"` fields.  Any of the fields of
    the returned table may be nil.
    * `player`: PlayerRef.


### Player Model Definition

{
	animation_speed = 30, -- Default animation speed, in FPS.
	textures = {"character.png", }, -- Default array of textures.
	visual_size = {x=1, y=1,}, -- Used to scale the model.
	animations = {
		-- <anim_name> = { x=<start_frame>, y=<end_frame>, },
		foo = { x= 0, y=19, },
		bar = { x=20, y=39, },
		-- ...
	},
}


Leaf decay
----------

To enable leaf decay for a node, add it to the `leafdecay` group.

The rating of the group determines how far from a node in the group "tree"
the node can be without decaying.

If `param2` of the node is not 0, the node will always be preserved.  Thus, if
the player places a node of that kind, you will want to set `param2` to `1` or
so.

The function `default.after_place_leaves` can be set as after_place_node of a
node to set `param2` to `1` if the player places the node (should not be used
for nodes that use `param2` otherwise (e.g. `facedir`)).

If the node is in the `leafdecay_drop` group then it will always be dropped as
an item.


Dyes
----

To make recipes that will work with any dye ever made by anybody, define
them based on groups.  You can select any group of groups, based on your need
for amount of colors.


### Color groups

Base color groups:
  * `basecolor_white`
  * `basecolor_grey`
  * `basecolor_black`
  * `basecolor_red`
  * `basecolor_yellow`
  * `basecolor_green`
  * `basecolor_cyan`
  * `basecolor_blue`
  * `basecolor_magenta`

Extended color groups (* means equal to a base color):
  * `excolor_white` *
  * `excolor_lightgrey`
  * `excolor_grey` *
  * `excolor_darkgrey`
  * `excolor_black` *
  * `excolor_red` *
  * `excolor_orange`
  * `excolor_yellow` *
  * `excolor_lime`
  * `excolor_green` *
  * `excolor_aqua`
  * `excolor_cyan` *
  * `excolor_sky_blue`
  * `excolor_blue` *
  * `excolor_violet`
  * `excolor_magenta` *
  * `excolor_red_violet`

The whole unifieddyes palette as groups:
  * `unicolor_<excolor>`

For the following, no white/grey/black is allowed:
  * `unicolor_medium_<excolor>`
  * `unicolor_dark_<excolor>`
  * `unicolor_light_<excolor>`
  * `unicolor_<excolor>_s50`
  * `unicolor_medium_<excolor>_s50`
  * `unicolor_dark_<excolor>_s50`

Example of one shapeless recipe using a color group:
```Lua
minetest.register_craft({
	type = "shapeless",
	output = '<mod>:item_yellow',
	recipe = {'<mod>:item_no_color', 'group:basecolor_yellow'},
})
```

### Color lists

  * `dye.basecolors`: List of the names of available base colors.
  * `dye.excolors`: List of the names of the available extended colors.


Trees
-----

  * `default.grow_tree(pos, is_apple_tree)`: Grows a tree or apple tree at `pos`.
  * `default.grow_jungle_tree(pos)`: Grows a jungle tree at `pos`.
  * `default.grow_pine_tree(pos)`: Grows a pine tree at `pos`.

